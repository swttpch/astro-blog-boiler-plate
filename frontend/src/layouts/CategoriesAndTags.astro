---
import ArticleList from "../components/ArticleList.astro";
import BaseHead from "../components/BaseHead.astro";
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import NewsLetter from "../components/NewsLetter.astro";
import { SITE_DESCRIPTION, SITE_TITLE } from "../consts";
import type Article from "../interfaces/article";
import type { BlogInfo } from "../interfaces/blog-info";
import type Category from "../interfaces/category";
import type Meta from "../interfaces/meta";
import type StrapiNavigation from "../interfaces/navigation";
import type { Tag } from "../interfaces/tag";
import fetchApi from "../lib/strapi";
import ThreePosts from "./ThreePosts.astro";

type Props = {
  data: any;
  curPath: string;
  curPage: number;
  totalPages: number;
  articles: Article[];
  highlights?: Article[];
};

const {articles,curPage,curPath,data,totalPages, highlights} = Astro.props;

const categories = await fetchApi<Category[]>({
  endpoint: 'categories',
  wrappedByKey: 'data',
  query: {
    sort: ['title:asc'],
    pagination: {
      page: 1,
      pageSize: 5,
    },
  },
});

await Promise.all(
  categories.map((cat) => {
    fetchApi<Meta>({
      endpoint: '/articles',
      wrappedByKey: 'meta',
      query: {
        publicationState: 'live',
        filters: {
          categories: {
            id: {
              $eq: cat.id,
            },
          },
        },
        pagination: {
          page: 1,
          pageSize: 1,
        },
      },
    }).then((res) => {
      cat.attributes.qtd = res.pagination.total;
    });
  }),
);

const tags = await fetchApi<Tag[]>({
  endpoint: 'tags',
  wrappedByKey: 'data',
  query: {
    sort: ['name:asc'],
  },
});

const blogInfo = await fetchApi<BlogInfo
>({
  endpoint: 'blog-info',
  query: {
    populate: '*',
  },
});

const headerNavigation = await fetchApi<StrapiNavigation<Category>[]>({
  endpoint: 'navigation/render/1',
});


---
<!doctype html>
<html lang="pt-br">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <Header
      items={headerNavigation.map((el) => ({ href: el.path, label: el.title }))}
      brand={blogInfo.data.attributes.brand.data}
    />
    {
      highlights && (
        <ThreePosts articles={highlights}/>
      )
    }
    
    <ArticleList
      curPath={curPath}
      curPage={curPage}
      totalPages={totalPages}
      categories={categories}
      tags={tags}
      articles={articles}
      brand={blogInfo.data.attributes.brand.data}
      socials={blogInfo.data.attributes.socials}
      description={blogInfo.data.attributes.summary}
    />
    <NewsLetter />
    <Footer
      brand={blogInfo.data.attributes.brand.data}
      description={blogInfo.data.attributes.summary}
      name={blogInfo.data.attributes.name}
      socials={blogInfo.data.attributes.socials}
    />
  </body>
</html>
---
import { getImage } from 'astro:assets';
import type Article from '../../interfaces/article';

import CategoryBadge from '../CategoryBadge.astro';
import Screen from '../Screen.astro';
import Container from '../Container.astro';
import { getStyleBackgroundImage } from '../../utils/getStyleBackgroundImage';
import { getLang, useTranslations } from '../../i18n/utils';
import FormattedDate from '../FormattedDate.astro';

type Props = {
  articles: Article[];
};

const { articles } = Astro.props;

const lang = getLang();
const t = useTranslations(lang);

export const prerender = true;
const imgUrl = `${import.meta.env.NODE_ENV === 'development' ? import.meta.env.STRAPI_URL : ''}`;
const betterImages = await Promise.all(
  articles.map((el) =>
    el.attributes.mainImage.data
      ? getImage({
          src: imgUrl + el.attributes.mainImage.data?.attributes.url,
          width: el.attributes.mainImage.data?.attributes.width,
          height: el.attributes.mainImage.data?.attributes.height,
          format: 'webp',
        })
      : undefined,
  ),
);

const bgs = betterImages.map((el) => {
  return getStyleBackgroundImage(el?.src);
});
---

<hero-data data-articles={articles} data-bgs={bgs}>
  <Screen id="hero" class="h-[481px] justify-end" style={bgs[0]}>
    <Container
      class="lg:items-end justify-center py-80 lg:justify-between z-10 gap-64 flex-col lg:flex-row"
    >
      {
        articles.map((article, index) => (
          <div
            class={`article-content-${index} hidden flex-1 data-[active]:flex justify-start items-end gap-[48px] max-w-[640px]`}
          >
            <div class="Content flex-1 flex flex-col justify-start items-start gap-[24px] ">
              {article.attributes.categories.data &&
                article.attributes.categories.data.length > 0 && (
                  <CategoryBadge>
                    {article.attributes.categories.data[0].attributes.title}
                  </CategoryBadge>
                )}
              <div class="TitleParagraph self-stretch flex flex-col justify-start items-start gap-[16px]">
                <a
                  href={'/p/' + article.attributes.slug}
                  class="AsTrSPaletasDeSombrasQuePossuoEComoReduzirSeuEstoque self-stretch text-white text-[36px] font-medium leading-[40px]"
                >
                  {article.attributes.title}
                </a>
              </div>
            </div>
          </div>
        ))
      }

      <div class="Frame1261153263 flex justify-start items-start gap-[12px]">
        {
          articles?.map((_, index) => (
            <button
              data-index={index}
              data-active={index === 0}
              class:list={[
                'article-tab transition-all w-12 data-[active]:w-32 h-[12px] bg-white bg-opacity-60 data-[active]:bg-opacity-1 data-[active]:bg-primary-base rounded-full',
                `article-tab-${index}`,
              ]}
            />
          ))
        }
      </div>
    </Container>
  </Screen>
  <Screen class="bg-primary-950 py-0 lg:py-0 px-0">
    <Container
      class="items-stretch h-min justify-stretch gap-0 py-0 lg:py-0 lg:overflow-hidden overflow-scroll"
    >
      {
        articles?.map((el, index) => {
          const category = el.attributes.categories.data?.[0]?.attributes.title;
          const reading_time = el.attributes.readingTime;
          const slug = '/p/' + el.attributes.slug;
          const title = el.attributes.title;

          return (
            <article-template data-index={index} class="self-stretch lg:flex-1 flex-[1_0_335px]">
              <a href={slug} class="flex-1 self-stretch ">
                <div
                  data-active={index === 0}
                  class:list={[
                    'Content p-32 data-[active]:bg-[rgb(255,255,255)]/5 border-t-4 border-transparent data-[active]:border-primary-base flex flex-col justify-center items-start gap-[16px] flex-1',
                    `hero-article-${index}`,
                  ]}
                >
                  <div class="HeadingParagraph self-stretch h-[56px] flex flex-col justify-start items-start gap-[16px]">
                    <div class="CategoryTitle self-stretch h-[56px] flex flex-col justify-start items-start gap-[8px]">
                      <p class="title self-stretch text-white text-lg font-medium">{title}</p>
                    </div>
                  </div>
                  <div class="self-stretch flex justify-between items-center">
                    {category && <CategoryBadge class={'self-start'}>{category}</CategoryBadge>}
                    <div class="self-stretch text-primary-lighter text-xs font-medium">
                      <FormattedDate date={new Date(el.attributes.createdAt)} /> â€¢ {reading_time}{' '}
                      {t('readingTime')}
                    </div>
                  </div>
                </div>
              </a>
            </article-template>
          );
        })
      }
    </Container>
  </Screen>
</hero-data>
<script>
  const TIMER = 15000;
  class HeroData extends HTMLElement {
    index = 0;
    readonly indexes = [0, 1, 2];
    bgs = this.dataset.bgs?.replaceAll(',b', 'b').split(';');
    interval = setInterval(() => {
      if (this.index === 2) {
        this.index = 0;
      } else {
        this.index++;
      }
      this.indexes.forEach((_, i) => {
        const article = this.querySelector(`.hero-article-${i}`);
        const tab = this.querySelector(`.article-tab-${i}`);
        const articleContent = this.querySelector(`.article-content-${i}`);
        const articleImage = this.querySelector(`.article-banner-${i}`);
        if (i === this.index) {
          article?.setAttribute('data-active', 'true');
          tab?.setAttribute('data-active', 'true');
          articleContent?.setAttribute('data-active', 'true');
          articleImage?.setAttribute('data-active', 'true');
        } else {
          article?.removeAttribute('data-active');
          tab?.removeAttribute('data-active');
          articleContent?.removeAttribute('data-active');
          articleImage?.removeAttribute('data-active');
        }
        document
          .querySelector<HTMLElement>('#hero')
          ?.setAttribute('style', this.bgs?.[this.index] || '');
      });
    }, TIMER);
    constructor() {
      super();

      this.querySelector<HTMLElement>('#hero')?.style.setProperty(
        'backgroung',
        this.bgs?.[0] || '',
      );
      this.querySelector(`.hero-article-0`)?.setAttribute('data-active', 'true');
      this.querySelector(`.article-tab-0`)?.setAttribute('data-active', 'true');
      this.querySelector(`.article-content-0`)?.setAttribute('data-active', 'true');
      this.querySelector(`.article-banner-0`)?.setAttribute('data-active', 'true');
      const buttons = this.querySelectorAll('.article-tab');
      buttons.forEach((el) => {
        const index = el.attributes.getNamedItem('data-index')?.value;
        if (!index) return;
        el.addEventListener('click', () => {
          this.indexes.forEach((_, i) => {
            const article = document.querySelector(`.hero-article-${i}`);
            const tab = document.querySelector(`.article-tab-${i}`);
            const articleContent = document.querySelector(`.article-content-${i}`);
            const articleImage = document.querySelector(`.article-banner-${i}`);
            clearInterval(this.interval);

            this.index = +index;
            if (i === +index) {
              article?.setAttribute('data-active', 'true');
              tab?.setAttribute('data-active', 'true');
              articleContent?.setAttribute('data-active', 'true');
              articleImage?.setAttribute('data-active', 'true');
            } else {
              article?.removeAttribute('data-active');
              tab?.removeAttribute('data-active');
              articleContent?.removeAttribute('data-active');
              articleImage?.removeAttribute('data-active');
            }
            document
              .querySelector<HTMLElement>('#hero')
              ?.setAttribute('style', this.bgs?.[this.index] || '');

            this.interval = setInterval(() => {
              if (this.index === 2) {
                this.index = 0;
              } else {
                this.index++;
              }
              this.indexes.forEach((_, i) => {
                const article = this.querySelector(`.hero-article-${i}`);
                const tab = this.querySelector(`.article-tab-${i}`);
                const articleContent = this.querySelector(`.article-content-${i}`);
                const articleImage = this.querySelector(`.article-banner-${i}`);
                if (i === this.index) {
                  article?.setAttribute('data-active', 'true');
                  tab?.setAttribute('data-active', 'true');
                  articleContent?.setAttribute('data-active', 'true');
                  articleImage?.setAttribute('data-active', 'true');
                } else {
                  article?.removeAttribute('data-active');
                  tab?.removeAttribute('data-active');
                  articleContent?.removeAttribute('data-active');
                  articleImage?.removeAttribute('data-active');
                }
                document
                  .querySelector<HTMLElement>('#hero')
                  ?.setAttribute('style', this.bgs?.[this.index] || '');
              });
            }, TIMER);
          });
        });
      });
    }
  }

  class ArticleHtml extends HTMLElement {
    constructor() {
      super();
    }
  }

  customElements.define('hero-data', HeroData);
  customElements.define('article-template', ArticleHtml);
</script>

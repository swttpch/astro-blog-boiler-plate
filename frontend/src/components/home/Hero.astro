---
import type Article from "../../interfaces/article";
import fetchApi from "../../lib/strapi";
import CategoryBadge from "../CategoryBadge.astro";

const articles = await fetchApi<Article[]>({
  endpoint: 'articles', 
  wrappedByKey: 'data', 
  query: {
    populate: {
      mainImage: {
        fields: ['url', 'alternativeText', 'width', 'height', 'formats']
      },
      category: {
        fields: ['title']
      }
    },
    pagination: {
      pageSize: 3,
    },
    publicationState: 'live',
  }
});
---
<hero-data data-articles={articles}>
  <main style={`background: linear-gradient(180deg, rgba(0, 0, 0, 0.00) 27.39%, #000 100%);`} class="relative w-full h-[481px] flex flex-col justify-end items-start gap-[64px]">
    {
      articles.map((article, index) => {
        const def = article.attributes.mainImage.data.attributes;
        const small = article.attributes.mainImage.data.attributes.formats.small;
        const medium = article.attributes.mainImage.data.attributes.formats.medium;
        const large = article.attributes.mainImage.data.attributes.formats.large;

        return (
        <img src={article.attributes.mainImage.data.attributes.url} width={article.attributes.mainImage.data.attributes.width} height={article.attributes.mainImage.data.attributes.height} alt={article.attributes.title} class={`article-banner-${index} hidden data-[active]:block w-full h-full object-cover object-center absolute top-0 left-0 z-[-1]`} 
        srcset={`${small.url} ${small.width}px, ${medium.url} ${medium.width}px, ${large.url} ${large.width}px, ${def.url} ${def.width}px`}
        /> 
      )})
    }
    <section class='container flex-row items-end gap-4 py-20 justify-between z-10'>
      {
        articles.map((article, index)=> (
        <div class={`article-content-${index} hidden Row flex-1 data-[active]:flex justify-start items-end gap-[48px] max-w-[640px]`}>
        <div class="Content flex-1 flex flex-col justify-start items-start gap-[24px] ">
          <CategoryBadge>
            {article.attributes.category.data[0].attributes.title}
          </CategoryBadge>
          <div class="TitleParagraph self-stretch flex flex-col justify-start items-start gap-[16px]">
            <a href={article.attributes.url} class="AsTrSPaletasDeSombrasQuePossuoEComoReduzirSeuEstoque self-stretch text-white text-[36px] font-medium leading-[40px]">
              {article.attributes.title}
            </a>
          </div>
        </div>
      </div>
        ))
      }
      
      <div class="Frame1261153263 flex justify-start items-start gap-[12px] ">
        {articles?.map((el, index) => (
          <button data-index={index} data-active={index === 0} class:list={["article-tab transition-all w-[12px] data-[active]:w-8 h-[12px] bg-white bg-opacity-60 data-[active]:bg-opacity-1 data-[active]:bg-[#C7CCFE] rounded-full", `article-tab-${index}`]}></button>
        ))}
      </div>
    </section>
  </main>
  <main class="Hero w-full flex flex-col justify-end items-start gap-[64px] bg-primary-950">
    <section class='container flex-row items-stretch justify-stretch'>
      {
        articles?.map((el,index) => {
          const category = el.attributes.category.data[0].attributes.title;
          const published_at= new Date(el.attributes.createdAt).toLocaleDateString('pt-BR');
          const reading_time = el.attributes.readingTime;
          const title = el.attributes.title;

          return (
          <article-template data-index={index} class='self-stretch flex-1'>
            <a href="test" class='flex-1 self-stretch '>
              <div data-active={index === 0} class:list={["Content p-[32px] data-[active]:bg-white data-[active]:bg-opacity-5 border-t-4 border-transparent data-[active]:border-[#7367F0] flex flex-col justify-center items-start gap-[16px] flex-1", `hero-article-${index}`]}>
                <div class="HeadingParagraph self-stretch h-[56px] flex flex-col justify-start items-start gap-[16px]">
                  <div class="CategoryTitle self-stretch h-[56px] flex flex-col justify-start items-start gap-[8px]">
                    <p class="title self-stretch text-white text-[18px] font-medium leading-[28px]">
                      {title}
                    </p>
                  </div>
                </div>
                <div class="TypeTags self-stretch flex justify-between items-center">
                  <CategoryBadge class={'self-start'}>
                    {category}
                  </CategoryBadge>
                  <div class="DeMaio20212MinDeLeitura self-stretch text-[#C7CCFE] text-[12px] font-medium leading-[16px]">
                    {published_at}  â€¢  {reading_time} min read
                  </div>
                </div>
              </div>
            </a>
          </article-template>
        )})
      }
     
  
      
    </section>
  </main>
</hero-data>
<script>
  const TIMER = 5000;
  class HeroData extends HTMLElement {
    index = 0
    readonly indexes = [0,1,2];
    interval = setInterval(() => {
        if(this.index === 2) {
          this.index = 0;
        } else {
          this.index++;
        }
        this.indexes.forEach((el, i) => {
          const article = this.querySelector(`.hero-article-${i}`);
          const tab = this.querySelector(`.article-tab-${i}`);
          const articleContent = this.querySelector(`.article-content-${i}`);
          const articleImage = this.querySelector(`.article-banner-${i}`);
          if(i === this.index) {
            article?.setAttribute('data-active', 'true');
            tab?.setAttribute('data-active', 'true');
            articleContent?.setAttribute('data-active', 'true');
            articleImage?.setAttribute('data-active', 'true');
          } else {
            article?.removeAttribute('data-active');
            tab?.removeAttribute('data-active');
            articleContent?.removeAttribute('data-active');
            articleImage?.removeAttribute('data-active');
          }
        })
      }, TIMER);
    constructor() {
      super();

      this.querySelector(`.hero-article-0`)?.setAttribute('data-active', 'true');
      this.querySelector(`.article-tab-0`)?.setAttribute('data-active', 'true');
      this.querySelector(`.article-content-0`)?.setAttribute('data-active', 'true');
      this.querySelector(`.article-banner-0`)?.setAttribute('data-active', 'true');

      const buttons = this.querySelectorAll('.article-tab');
      buttons.forEach(el => {
        const index = el.attributes.getNamedItem('data-index')?.value;
        if(!index) return;
        el.addEventListener('click', (e) => {
          this.indexes.forEach((el, i) => {
            const article = document.querySelector(`.hero-article-${i}`);
            const tab = document.querySelector(`.article-tab-${i}`);
            const articleContent = document.querySelector(`.article-content-${i}`);
            const articleImage = document.querySelector(`.article-banner-${i}`);
            clearInterval(this.interval);
            
            this.index = +index;
            if(i === +index) {
              article?.setAttribute('data-active', 'true');
              tab?.setAttribute('data-active', 'true');
              articleContent?.setAttribute('data-active', 'true');
              articleImage?.setAttribute('data-active', 'true');
            } else {
              article?.removeAttribute('data-active');
              tab?.removeAttribute('data-active');
              articleContent?.removeAttribute('data-active');
              articleImage?.removeAttribute('data-active');
            }
            this.interval = setInterval(() => {
              if(this.index === 2) {
                this.index = 0;
              } else {
                this.index++;
              }
              this.indexes.forEach((el, i) => {
                const article = this.querySelector(`.hero-article-${i}`);
                const tab = this.querySelector(`.article-tab-${i}`);
                const articleContent = this.querySelector(`.article-content-${i}`);
                const articleImage = this.querySelector(`.article-banner-${i}`);
                if(i === this.index) {
                  article?.setAttribute('data-active', 'true');
                  tab?.setAttribute('data-active', 'true');
                  articleContent?.setAttribute('data-active', 'true');
                  articleImage?.setAttribute('data-active', 'true');
                } else {
                  article?.removeAttribute('data-active');
                  tab?.removeAttribute('data-active');
                  articleContent?.removeAttribute('data-active');
                  articleImage?.removeAttribute('data-active');
                }
              })
            }, TIMER);
          })
        })
      })
    }
  }

  class ArticleHtml extends HTMLElement {
    constructor() {
      super();
    }
  }

  customElements.define('hero-data', HeroData);
  customElements.define('article-template', ArticleHtml);

</script>
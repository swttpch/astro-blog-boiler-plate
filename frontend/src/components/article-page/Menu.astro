---
import ShareIcon from '../icons/ShareIcon.astro';
import ShareFullIcon from '../icons/ShareFullIcon.astro';
import HearthFullIcon from '../icons/HearthFullIcon.astro';
import HearthIcon from '../icons/HearthIcon.astro';
import MenuIcon from '../icons/MenuIcon.astro';
import ShareBoxContent from '../ShareBoxContent.astro';
import MenuBoxContent from '../MenuBoxContent.astro';

type Props = {
  idArticle: number;
  likes: number;
  url: string;
  titles: string[];
  email?: string;
};
const { idArticle, likes, url, titles, email } = Astro.props;
---

<div
  id="modal-background"
  class="absolute top-0 hidden z-40 left-0 w-full h-full data-[active]:block"
>
</div>

<div
  class="top-[100px] lg:top-[200px] lg:mt-[-12px] sticky flex flex-col items-center gap-56 max-w-72 flex-1 text-gray-600 hover:text-black z-40"
>
  <menu-button
    data-id={idArticle}
    class="text-text-soft hover:text-text-sub data-[active]:text-text-sub"
  >
    <button class="transition-colors">
      <MenuIcon color="currentColor" />
    </button>
    <MenuBoxContent titles={titles} />
  </menu-button>
  <like-button
    data-id={idArticle}
    class="flex flex-col items-center gap-4 self-stretch group text-gray-600 hover:text-black"
  >
    <button class="transition-colors">
      <HearthIcon id={'hearth-icon'} color="currentColor" />
      <HearthFullIcon id={'hearth-full-icon'} class={'hidden'} />
    </button>
    <span class="text-sm font-medium transition-colors">{likes}</span>
  </like-button>
  <!-- <div class="flex flex-col items-center gap-4 self-stretch group text-gray-600 hover:text-black">
    <button class="transition-colors">
      <CommentsIcon id={'comment-icon'} color="currentColor" />
      <CommentsFullIcon id={'comment-full-icon'} />
    </button>
    <span class="text-sm font-medium transition-colors">999999</span>
  </div> -->
  <share-button
    data-id={idArticle}
    class="flex relative flex-col items-center gap-4 self-stretch group text-gray-600 hover:text-black"
  >
    <button class="transition-colors">
      <ShareIcon id="share-icon" color="currentColor" />
      <ShareFullIcon id="share-full-icon" class={'hidden'} />
    </button>
    <!-- <span class="text-sm font-medium transition-colors">{shares}</span> -->

    <ShareBoxContent url={url} email={email} />
  </share-button>
</div>

<script>
  const liked = sessionStorage.getItem('liked');
  class LikeButton extends HTMLElement {
    liked = liked !== null;
    hearth = this.querySelector('#hearth-icon');
    hearthFull = this.querySelector('#hearth-full-icon');
    constructor() {
      super();
      const id = this.dataset.id;

      if (!id) return;

      if (liked) {
        this.hearth?.classList.add('hidden');
        this.hearthFull?.classList.add('block');
      } else {
        this.hearth?.classList.add('block');
        this.hearthFull?.classList.add('hidden');
      }

      this.querySelector('button')?.addEventListener('click', () => {
        this.querySelector('button')?.setAttribute('disabled', 'true');
        this.toggleStorage();
        this.hearth?.classList.toggle('block');
        this.hearth?.classList.toggle('hidden');
        this.hearthFull?.classList.toggle('hidden');
        this.hearthFull?.classList.toggle('block');
        if (this.liked) {
          this.addLike(+id);
        } else {
          this.removeLike(+id);
        }
      });
    }

    async addLike(id: number) {
      const res = await fetch(`/api/articles/${id}/likes/add.json`)
        .then((res) => res.json())
        .then((res) => res);
      this.querySelector('span')!.textContent = res.likes;
      this.querySelector('button')?.removeAttribute('disabled');
    }
    async removeLike(id: number) {
      const res = await fetch(`/api/articles/${id}/likes/remove.json`)
        .then((res) => res.json())
        .then((res) => res);
      this.querySelector('span')!.textContent = res.likes;
      this.querySelector('button')?.removeAttribute('disabled');
    }
    toggleStorage = () => {
      this.liked = !this.liked;
      if (this.liked) {
        localStorage.setItem('liked', 'true');
      } else {
        localStorage.removeItem('liked');
      }
    };
  }

  class ShareButton extends HTMLElement {
    shared = false;
    icon = this.querySelector('#share-icon');
    iconFull = this.querySelector('#share-full-icon');
    modal = this.querySelector('#share-modal-content');
    modalbg = document.querySelector('#modal-background');
    menu = document.querySelector('#menu');
    constructor() {
      super();
      const id = this.dataset.id;

      if (!id) return;
      this.icon?.classList.add('block');
      this.iconFull?.classList.add('hidden');
      this.shared = false;

      this.querySelector('button')?.addEventListener('click', () => {
        if (!this.shared) {
          this.openModal();
        } else {
          this.closeModal();
        }
      });
    }

    closeModal = () => {
      this.modal?.classList.add('hidden');
      this.modal?.classList.remove('flex');
      this.icon?.classList.remove('hidden');
      this.icon?.classList.add('block');
      this.iconFull?.classList.remove('block');
      this.iconFull?.classList.add('hidden');
      this.modalbg?.classList.remove('block');
      this.modalbg?.classList.add('hidden');
      this.modalbg?.removeEventListener('click', this.closeModal, true);
      this.menu?.removeEventListener('click', this.closeModal, true);
      this.shared = false;
      this.modal?.querySelector('button')?.classList.remove('text-green-500');
    };

    openModal = () => {
      this.modal?.classList.remove('hidden');
      this.modal?.classList.add('flex');
      this.icon?.classList.remove('block');
      this.icon?.classList.add('hidden');
      this.iconFull?.classList.remove('hidden');
      this.iconFull?.classList.add('block');
      this.modalbg?.classList.remove('hidden');
      this.modalbg?.classList.add('block');
      this.menu?.addEventListener('click', this.closeModal, true);
      this.modalbg?.addEventListener('click', this.closeModal, true);
      this.shared = true;
    };
  }

  class MenuButton extends HTMLElement {
    modal = this.querySelector('#menu-modal-content');
    modalbg = document.querySelector('#modal-background');
    constructor() {
      super();
      const id = this.dataset.id;

      if (!id) return;

      this.querySelector('button')?.addEventListener('click', () => {
        const isOpen = this.modal?.getAttribute('data-active');
        if (!(isOpen === 'true')) {
          this.openModal();
        } else {
          this.closeModal();
        }
      });
    }

    closeModal = () => {
      this.modal?.removeAttribute('data-active');
      this.modalbg?.removeAttribute('data-active');
      this.modalbg?.removeEventListener('click', this.closeModal, true);
    };

    openModal = () => {
      this.modal?.setAttribute('data-active', 'true');
      this.modalbg?.setAttribute('data-active', 'true');
      this.modalbg?.addEventListener('click', this.closeModal, true);
    };
  }

  customElements.define('menu-button', MenuButton);
  customElements.define('like-button', LikeButton);
  customElements.define('share-button', ShareButton);
</script>

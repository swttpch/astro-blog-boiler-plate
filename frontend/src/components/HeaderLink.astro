---
import type { HTMLAttributes } from 'astro/types';
import { twMerge } from 'tailwind-merge';

type Props = HTMLAttributes<'a'> & { hasSub?: boolean };

const { href, class: className, hasSub = false, id, ...props } = Astro.props;
const { pathname } = Astro.url;
const subpath = pathname.match(/[^/]+/g);
const isActive = href === pathname || href === '/' + subpath?.[0];
---

<header-item
  data-active={isActive}
  data-is-current={isActive}
  data-has-sub={`${hasSub}`}
  class={twMerge(
    'px-20 transition-all flex justify-center items-center gap-2 text-text-sub text-base box-content font-normal leading-6 border-b border-transparent data-[active]:border-b-primary-base data-[active]:text-text-main hover:text-text-main hover:border-b-primary-base',
    className,
  )}
  id={id}
  {...props}
>
  <a href={href}>
    <slot />
  </a>
  {
    hasSub && (
      <svg
        id={id + '--chevron-icon'}
        class="chevron-icon data-[active]:rotate-180 transition-all"
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
      >
        <path
          d="M11.9997 13.1719L16.9497 8.22192L18.3637 9.63592L11.9997 15.9999L5.63574 9.63592L7.04974 8.22192L11.9997 13.1719Z"
          fill="currentColor"
        />
      </svg>
    )
  }
</header-item>
<script>
  class HeaderItem extends HTMLElement {
    private modalOpened = false;
    private modal: HTMLElement;
    private chevronIcon: HTMLElement;
    private itemId: string;
    private isCurrent: boolean;
    constructor() {
      super();
      this.itemId = this.id.split('--')[1];
      this.modal = document.querySelector(`#header-modal--${this.itemId}`) as HTMLElement;
      this.chevronIcon = this.querySelector(`#${this.id}--chevron-icon`) as HTMLElement;
      this.isCurrent = this.dataset['isCurrent'] !== undefined;
      if (this.dataset['hasSub'] === 'true') {
        this.addEventListener('mouseenter', this.openModal);
        this.addEventListener('mouseleave', this.closeModal);
      }
    }

    openModal() {
      this.modal.setAttribute('data-active', '');
      this.chevronIcon.setAttribute('data-active', '');
      this.setAttribute('data-active', '');
      this.modalOpened = true;
    }

    closeModal() {
      this.modal.removeAttribute('data-active');
      this.chevronIcon.removeAttribute('data-active');
      if (!this.isCurrent) {
        this.removeAttribute('data-active');
      }
      this.modalOpened = false;
    }
  }

  customElements.define('header-item', HeaderItem);
</script>

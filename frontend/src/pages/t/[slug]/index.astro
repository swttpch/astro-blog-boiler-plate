---
import type { GetStaticPaths } from 'astro';
import { PAGE_SIZE } from '../../../constants/common';
import type Article from '../../../interfaces/article';
import type Meta from '../../../interfaces/meta';
import type { Tag } from '../../../interfaces/tag';
import CategoriesAndTags from '../../../layouts/CategoriesAndTagsLayout.astro';
import fetchApi from '../../../lib/strapi';

export const getStaticPaths = (async () => {
  const allTags = await fetchApi<Tag[]>({
    endpoint: '/tags',
    wrappedByKey: 'data',
  });

  return allTags.map(tag => ({
    params: {
      slug: tag.attributes.slug,
    }
  }));
}) satisfies GetStaticPaths;

const { slug } = Astro.params;


const tagsData = await fetchApi<Tag>({
  endpoint: `/tags`,
  wrappedByKey: 'data',
  wrappedByList: true,
  query: {
    filters: {
      slug: {
        $eq: slug,
      },
    },
    populate: {
      highlights: {
        populate: '*',
      },
    },
  },
});

if (!tagsData) {
  Astro.response.status = 404;
  Astro.response.statusText = 'Not found';
}

const articlesResponse = await fetchApi<{ data: Article[]; meta: Meta }>({
  endpoint: '/articles',
  query: {
    publicationState: 'live',
    sort: ['publishedAt:desc'],
    filters: {
      tags: {
        id: {
          $eq: tagsData.id,
        },
      },
    },
    populate: {
      author: {
        fields: '*',
        populate: '*',
      },
      mainImage: '*',
      categories: '*',
    },
    pagination: {
      page: 1,
      pageSize: PAGE_SIZE,
    },
  },
});
---

<CategoriesAndTags
  articles={articlesResponse.data}
  curPage={articlesResponse.meta.pagination.page}
  data={{
    description: tagsData.attributes.description,
    title: '#'+tagsData.attributes.name,
    items: [{ title: 'Tags' }, { title: tagsData.attributes.name, url: `/t/${slug}/` }],
  }}
  curPath={`/t/${slug}/`}
  totalPages={articlesResponse.meta.pagination.pageCount}
  highlights={tagsData.attributes.highlights.data}
/>
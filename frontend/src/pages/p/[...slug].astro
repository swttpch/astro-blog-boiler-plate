---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts.ts';
import AuthorComplement from '../../components/AuthorComplement.astro';
import Screen from '../../components/Screen.astro';
import Container from '../../components/Container.astro';
import ProgressReading from '../../components/ProgressReading.astro';
import Menu from '../../components/article-page/Menu.astro';
import ArticleFeedback from '../../components/article-page/ArticleFeedback.astro';
import AuthorInfo from '../../components/article-page/AuthorInfo.astro';
import TagsAndShare from '../../components/article-page/TagsAndShare.astro';
import Pagination from '../../components/article-page/Pagination.astro';
import Breadcrumb from '../../components/Breadcrumb.astro';
import Footer from '../../components/Footer.astro';
import NewsLetter from '../../components/NewsLetter.astro';
import fetchApi from '../../lib/strapi.ts';
import type Article from '../../interfaces/article.ts';
import { getStyleBackgroundImage } from '../../utils/getStyleBackgroundImage.ts';
import ArticleContent from '../../components/article-page/ArticleContent.astro';
import { getImage } from 'astro:assets';
import Comments from '../../components/react/Comments.tsx';
import { getStaticPathsPost } from '../../utils/getStaticPaths/post.ts';
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';

export const prerender = true;

export const getStaticPaths = (async () => {
  return await getStaticPathsPost();
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { props } = Astro;
const { post, blogInfo, headerNavigation, footerNavigation } = props;

if (!post || post === undefined || !post.id) {
  Astro.response.status = 404;
  Astro.response.statusText = 'Not found';
}

const prevId = post.id === 1 ? post.id + 2 : post.id - 1;
const nextArticle = await fetchApi<Article | null>({
  endpoint: `/articles/${post.id + 1}`,
  wrappedByKey: 'data',
  query: {
    fields: ['slug', 'title'],
    publicationState: 'live',
  },
});

const prevArticle = await fetchApi<Article | null>({
  endpoint: `/articles/${prevId}`,
  wrappedByKey: 'data',
  query: {
    fields: ['slug', 'title'],
    publicationState: 'live',
  },
});

const safePrevArticle = await fetchApi<Article>({
  endpoint: `/articles`,
  wrappedByKey: 'data',
  wrappedByList: true,
  query: {
    fields: ['slug', 'title'],
    publicationState: 'live',
    pagination: {
      pageSize: 1,
      page: 1,
    },
  },
});

const safeNextArticle = await fetchApi<Article>({
  endpoint: `/articles`,
  wrappedByKey: 'data',
  wrappedByList: true,
  query: {
    fields: ['slug', 'title'],
    publicationState: 'live',
    pagination: {
      pageSize: 1,
      page: 2,
    },
  },
});
const imgUrl = `${import.meta.env.NODE_ENV === 'development' ? import.meta.env.STRAPI_URL : ''}`;
const def = post.attributes.mainImage.data
  ? await getImage({
      src: imgUrl + post.attributes.mainImage.data.attributes.url,
      width: post.attributes.mainImage.data.attributes.width,
      height: post.attributes.mainImage.data.attributes.height,
      format: 'webp',
    })
  : undefined;

const categories = post.attributes.categories.data || [];

const h1List =
  post.attributes.content.match(/<h1>(.*?)<\/h1>/g)?.map((h1) => h1.replace(/<\/?h1>/g, '')) ?? [];
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <Header blogInfo={blogInfo} headerNavigation={headerNavigation} />
    <Screen
      class="h-[424px] lg:h-[481px] justify-end relative"
      style={getStyleBackgroundImage(def?.src)}
    >
      <Container class={'flex-col gap-32 lg:gap-64 pb-32 pt-80 lg:py-80'}>
        <div></div>
        <h1 class="font-semibold text-white text-center w-full">
          {post.attributes.title}
        </h1>
        <AuthorComplement
          author={post.attributes.author.data}
          date={post.attributes.createdAt}
          readingTime={post.attributes.readingTime}
        />
      </Container>
    </Screen>

    <div class="relative w-full lg:py-80">
      <ProgressReading />
      <Breadcrumb
        class={'flex lg:hidden py-16 px-[36px]'}
        items={[
          categories?.map((category) => ({
            title: category.attributes.title,
            url: `/c/${category.attributes.slug}`,
          })),
          { title: post.attributes.title, url: post.attributes.slug },
        ]}
      />
      <Screen class="pl-0 relative pr-24 py-32 lg:py-0 justify-end">
        <Container class={'gap-24 lg:gap-64 '}>
          <Menu
            email={blogInfo.data.attributes.email}
            titles={h1List}
            idArticle={post.id}
            likes={post.attributes.likes}
            url={post.attributes.slug}
          />
          <div class="flex flex-col gap-32 items-start flex-1 overflow-visible">
            <Breadcrumb
              class={'hidden lg:flex'}
              items={[
                categories?.map((category) => ({
                  title: category.attributes.title,
                  url: `/c/${category.attributes.slug}`,
                })),
                { title: post.attributes.title, url: post.attributes.slug },
              ]}
            />
            <ArticleContent content={post.attributes.content} />
            <div class="flex flex-col gap-32 items-start flex-1 overflow-hidden">
              <ArticleFeedback id={post.id} usefullCount={post.attributes.usefullCount} />
              <Pagination
                nextArticle={nextArticle ?? safeNextArticle}
                prevArticle={prevArticle ?? safePrevArticle}
              />
              {post.attributes.author.data && <AuthorInfo author={post.attributes.author.data} />}
              <TagsAndShare tags={post.attributes.tags.data} slug={post.attributes.slug} />
              <Comments client:visible id={post.id} />
            </div>
          </div>
        </Container>
      </Screen>
    </div>
    <NewsLetter />
    <Footer footerNavigation={footerNavigation} blogInfo={blogInfo} />
  </body>
</html>

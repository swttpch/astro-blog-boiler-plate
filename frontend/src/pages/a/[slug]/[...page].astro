---
import DefaultLayout from '../../../layouts/DefaultLayout.astro';
import Breadcrumb from '../../../components/Breadcrumb.astro';
import Screen from '../../../components/Screen.astro';
import Container from '../../../components/Container.astro';
import AuthorBoxAvatar from '../../../components/author-box/AuthorBoxAvatar.astro';
import Socials from '../../../components/icons/Socials.astro';
import ArticleList from '../../../components/ArticleList.astro';
import ArticlesMosaic from '../../../components/ArticlesMosaic.astro';
import { getStaticPathsAuthorsSlug } from '../../../utils/getStaticPaths/authors';
import { getLang, useTranslations } from '../../../i18n/utils';
import { extractCategories, extractTags } from '../../../utils/blog';
import type { GetStaticPaths } from 'astro';

export const prerender = true;
export const getStaticPaths = (async () => {
  const lang = getLang();
  return await getStaticPathsAuthorsSlug({ language: lang });
}) satisfies GetStaticPaths;

const { slug, page = '1' } = Astro.params;
const { author, articles, blogInfo, footer, header, meta } = Astro.props;
const categories = extractCategories(articles);
const tags = extractTags(articles);
const lang = getLang();
const t = useTranslations(lang);
---

<DefaultLayout
  title={author.attributes.seo?.metaTitle || author.attributes.name}
  description={author.attributes.seo?.metaDescription || author.attributes.description}
  blogInfo={blogInfo}
  headerNavigation={header}
  footerNavigation={footer}
>
  <Screen class={'py-48'}>
    <Container class={'flex-col gap-32'}>
      <Breadcrumb
        items={[
          {
            title: t('authors'),
          },
          {
            title: author.attributes.name,
            url: '/a/' + author.attributes.slug,
          },
        ]}
      />
      <div
        class="overflow-hidden justify-center lg:justify-start lg:items-start gap-32 lg:gap-48 flex self-stretch flex-col lg:flex-row"
      >
        <div class="flex flex-col justify-start items-center lg:items-start gap-16">
          <AuthorBoxAvatar
            class="w-[128px] h-[128px]"
            image={author.attributes.avatar?.data}
            name={author.attributes.name}
          />
          <div
            class="p-10 bg-text-gray-100 justify-start items-start gap-10 flex rounded-xs border border-border-soft"
          >
            <div class="text-text-main text-sm break-words">
              {meta.pagination.total}
              {meta.pagination.total > 1 ? t('published_many') : t('published_one')}
            </div>
          </div>
        </div>
        <div class="flex-[1] flex flex-col justify-start items-start gap-24">
          <div class="self-stretch h-48 flex flex-col justify-start items-start">
            <h1 class="text-text-main font-medium break-words">{author.attributes.name}</h1>
          </div>
          <div class="self-stretch flex flex-col justify-start items-start gap-8">
            <p class="self-stretch text-text-sub text-base font-normal break-words">
              {author.attributes.description}
            </p>
          </div>
        </div>
        {
          author.attributes.socials && (
            <div class="flex flex-col justify-start items-start gap-24">
              <div class="text-text-main text-lg font-bold break-words">{t('socialMedia')}</div>
              <div class="self-stretch flex flex-col justify-start items-start gap-8">
                {author.attributes.socials.map((social) => (
                  <a
                    href={social.url.startsWith('http') ? social.url : '//' + social.url}
                    target="_blank"
                    class="justify-start items-center gap-4 flex"
                  >
                    <Socials social={social.type} class={'size-16'} />
                    <div class="text-text-main text-base font-normal break-words">
                      {social.type}
                    </div>
                  </a>
                ))}
              </div>
            </div>
          )
        }
      </div>
    </Container>
  </Screen>
  <ArticlesMosaic articles={articles} />
  <ArticleList
    curPath={'/a/' + slug + '/'}
    curPage={(page && +page) || 1}
    totalPages={meta.pagination.pageCount}
    categories={categories}
    tags={tags}
    articles={articles}
    brand={blogInfo.data.attributes.brand.data}
    socials={blogInfo.data.attributes.socials}
    description={blogInfo.data.attributes.summary}
  />
</DefaultLayout>

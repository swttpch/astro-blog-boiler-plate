---
import { defaultBlogRequests, defaultBlogRequestsWithCategoriesAndTags } from '../../../lib/blog';
import DefaultLayout from '../../../layouts/DefaultLayout.astro';
import Breadcrumb from '../../../components/Breadcrumb.astro';
import Screen from '../../../components/Screen.astro';
import Container from '../../../components/Container.astro';
import AuthorBoxAvatar from '../../../components/author-box/AuthorBoxAvatar.astro';
import Socials from '../../../components/icons/Socials.astro';
import { PAGE_SIZE } from '../../../constants/common';
import fetchApi from '../../../lib/strapi';
import type Article from '../../../interfaces/article';
import type Meta from '../../../interfaces/meta';
import type Author from '../../../interfaces/author';
import ArticleList from '../../../components/ArticleList.astro';
import ArticlesMosaic from '../../../components/ArticlesMosaic.astro';

const { slug, page } = Astro.params;
if (!page) {
  Astro.response.status = 404;
}

const { blogInfo, headerNavigation, footerNavigation } = await defaultBlogRequests();
const { categories, tags } = await defaultBlogRequestsWithCategoriesAndTags();
const articles = await fetchApi<Article[]>({
  endpoint: 'articles',
  wrappedByKey: 'data',
  query: { populate: '*' },
});

const authorData = await fetchApi<Author>({
  endpoint: '/authors',
  wrappedByKey: 'data',
  wrappedByList: true,
  query: {
    populate: '*',
    filters: {
      slug: {
        $eq: slug,
      },
    },
  },
});

const {
  pagination: { total },
} = await fetchApi<Meta>({
  endpoint: 'articles',
  wrappedByKey: 'meta',
  query: {
    filters: {
      author: {
        id: {
          $eq: authorData.id,
        },
      },
    },
    fields: ['id'],
  },
});

const articlesResponse = await fetchApi<{ data: Article[]; meta: Meta }>({
  endpoint: '/articles',
  query: {
    publicationState: 'live',
    sort: ['publishedAt:desc'],
    filters: {
      author: {
        id: {
          $eq: authorData.id,
        },
      },
    },
    populate: {
      author: {
        fields: '*',
        populate: '*',
      },
      mainImage: '*',
      categories: '*',
    },
    pagination: {
      page: page,
      pageSize: PAGE_SIZE,
    },
  },
});
---

<DefaultLayout
  blogInfo={blogInfo}
  headerNavigation={headerNavigation}
  footerNavigation={footerNavigation}
>
  <Screen class={'py-48'}>
    <Container class={'flex-col gap-32'}>
      <Breadcrumb
        items={[
          {
            title: 'Autores',
          },
          {
            title: authorData.attributes.name,
            url: '/a/' + authorData.attributes.slug,
          },
        ]}
      />
      <div
        class="overflow-hidden justify-center lg:justify-start lg:items-start gap-32 lg:gap-48 flex self-stretch flex-col lg:flex-row"
      >
        <div class="flex flex-col justify-start items-center lg:items-start gap-16">
          <AuthorBoxAvatar
            class="w-[128px] h-[128px]"
            image={authorData.attributes.avatar?.data}
            name={authorData.attributes.name}
          />
          <div
            class="p-10 bg-text-gray-100 justify-start items-start gap-10 flex rounded-xs border border-border-soft"
          >
            <div class="text-text-main text-sm break-words">{total} publicações</div>
          </div>
        </div>
        <div class="flex-[1] flex flex-col justify-start items-start gap-24">
          <div class="self-stretch h-48 flex flex-col justify-start items-start">
            <h1 class="text-text-main font-medium break-words">{authorData.attributes.name}</h1>
          </div>
          <div class="self-stretch flex flex-col justify-start items-start gap-8">
            <p class="self-stretch text-text-sub text-base font-normal break-words">
              {authorData.attributes.description}
            </p>
          </div>
        </div>
        {
          authorData.attributes.socials && (
            <div class="flex flex-col justify-start items-start gap-24">
              <div class="text-text-main text-lg font-bold break-words">Redes sociais</div>
              <div class="self-stretch flex flex-col justify-start items-start gap-8">
                {authorData.attributes.socials.map((social) => (
                  <a
                    href={social.url.startsWith('http') ? social.url : '//' + social.url}
                    target="_blank"
                    class="justify-start items-center gap-4 flex"
                  >
                    <Socials social={social.type} class={'size-16'} />
                    <div class="text-text-main text-base font-normal break-words">
                      {social.type}
                    </div>
                  </a>
                ))}
              </div>
            </div>
          )
        }
      </div>
    </Container>
  </Screen>
  <ArticlesMosaic articles={articles} />
  <ArticleList
    curPath={'/a/' + slug + '/'}
    curPage={(page && +page) || 1}
    totalPages={articlesResponse.meta.pagination.pageCount}
    categories={categories}
    tags={tags}
    articles={articlesResponse.data}
    brand={blogInfo.data.attributes.brand.data}
    socials={blogInfo.data.attributes.socials}
    description={blogInfo.data.attributes.summary}
  />
</DefaultLayout>
